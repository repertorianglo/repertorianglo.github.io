---
import "../styles/global.css";
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';
import SubHeader from '../components/SubHeader.astro';
import type { Link } from "../common/types";
import { getEixosTematicos } from "../common/eixosTematicos";
import { grupos } from '../common/pessoas';

type Props = { 
	postNumber: string;
	titulo: string;
	subtitulo?: string;
	grupo?: number;
	responsavel?: string;
	criadoPor?: string;
	dataPublicacao?: Date;
	eixo: string;
}

const eixosTematicos = await getEixosTematicos();

const { titulo, subtitulo, dataPublicacao, eixo, postNumber, grupo, responsavel, criadoPor } = Astro.props;

let currentGrupo, currentResponsavel;
if (!criadoPor && typeof grupo === 'number' && grupo >= 0 && grupo < grupos.length) {
	currentGrupo = grupos[grupo];
	currentResponsavel = currentGrupo.responsavel;
}

currentResponsavel = responsavel || currentResponsavel;

const currentEixo = eixosTematicos.find(e => e.id === eixo);
const eixoKebab = currentEixo?.id.replace(/^\d+-/, '')

// Import hero image dynamically
let heroImage;
try {
	heroImage = await import(`../../public/images/blog/${eixoKebab}/${postNumber}/hero.png`);
} catch (error) {
	console.warn(`Hero image not found for eixo: ${eixoKebab}`);
}
---

<html lang="en">
	<head>
		<BaseHead title={`RepertoriAnglo | ${currentEixo?.title}`} description={titulo} />
		<style>
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
				max-height: 200px;
				width: auto;
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				color: rgb(var(--gray-dark));
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body style="min-height: 100vh; display: flex; flex-direction: column;">
		<Header hasSubheader />
		<SubHeader links={eixosTematicos as Link[]} />
		<main >
			<div id="background-image" class="fixed top-0 left-0 w-full h-full -z-10 opacity-15">
				<img src="/images/background.jpeg" alt="Background image" class="w-full h-full object-cover" />
			</div>
			<article>
				<div class="prose">
					<div class="relative" style="margin-top: -16px;">
						<div class="absolute top-0 left-0">
							<a class="flex items-center text-sm text-blue-anglo" href="#" onclick="history.back()">
								<span class="arrow pr-1">&larr;</span> Voltar
							</a>
						</div>
						<div class="text-center">
							<div class="tabs" role="tablist" style="display:flex;gap:8px;justify-content:center;margin-top:12px;">
								<button id="tab-materia" role="tab" aria-selected="true" class="w-[92px] outline-0 text-xs py-1 rounded border border-emerald-700 bg-emerald-600 text-white cursor-pointer">Matéria</button>
								<button id="tab-comentarios" role="tab" aria-selected="false" class="w-[92px] outline-0 text-xs py-1 rounded border border-gray-300 bg-gray-200 cursor-pointer">Comentários</button>
							</div>

							<div id="comments-panel" class="relative" style="display:none; margin-top:18px;">
								<div class="absolute bg-transparent opacity-90 z-10 top-0 left-0 w-full h-full p-2 rounded" style="max-width:720px;margin:auto;">
									<img src="/images/em_construcao.png" alt="Comentários Placeholder" style="height:100%;display:block;margin:auto;" />
								</div>
								<div class="text-left opacity-75" style="max-width:720px;margin:auto;color:rgb(var(--gray-dark));">
									<p class="mb-2"><strong>Comentários</strong></p>
									<p class="text-sm text-gray-600">Nenhum comentário ainda.</p>

									<form id="comment-form" onsubmit="event.preventDefault(); addComment();">
										<!-- <textarea id="comment-text" rows="3" placeholder="Escreva um comentário..." class="w-full outline-0 p-2 rounded border mt-2" style="resize:vertical"></textarea> -->
										<textarea id="comment-text" rows="3" placeholder="Escreva um comentário..." class="w-full cursor-not-allowed bg-gray-200 border-gray-300 outline-0 p-2 rounded border mt-2" style="resize:vertical" disabled></textarea>
										<div style="text-align:right;">
											<!-- <button type="submit" class="inline-block text-xs px-3 py-1 bg-emerald-600 text-white rounded">Enviar</button> -->
											<button type="submit" class="inline-block text-xs px-3 py-1 bg-gray-200 rounded cursor-not-allowed" disabled>Enviar</button>
										</div>
									</form>

									<div id="comments-list" style="margin-top:12px;"></div>
								</div>
							</div>

							<script>
								(function(){
									const tabMateria = document.getElementById('tab-materia') as HTMLButtonElement | null;
									const tabComentarios = document.getElementById('tab-comentarios') as HTMLButtonElement | null;
									const commentsPanel = document.getElementById('comments-panel') as HTMLDivElement | null;

									// selectors to hide when showing comments (adjust if needed)
									const hideSelectors = [
										'.hero-image',
										'.prose > .text-center > h2',
										'.prose > .text-center > .date',
										'#post-content',
										'.prose > .text-center > .text-left'
									];

									function setActive(tab: 'materia' | 'comentarios'){
										// ensure required elements exist
										if (!tabMateria || !tabComentarios || !commentsPanel) return;

										if(tab === 'materia'){
											tabMateria.setAttribute('aria-selected','true');
											tabMateria.classList.add('bg-emerald-600','text-white', 'border-emerald-700');
											tabMateria.classList.remove('bg-gray-200', 'border-gray-300');
											tabComentarios.setAttribute('aria-selected','false');
											tabComentarios.classList.add('bg-gray-200', 'border-gray-300');
											tabComentarios.classList.remove('bg-emerald-600','text-white', 'border-emerald-700');

											commentsPanel.style.display = 'none';
											hideSelectors.forEach(sel=>{
												document.querySelectorAll(sel).forEach(el=> (el as HTMLElement).style.display = '');
											});
										} else {
											tabMateria.setAttribute('aria-selected','false');
											tabMateria.classList.add('bg-gray-200', 'border-gray-300');
											tabMateria.classList.remove('bg-emerald-600','text-white', 'border-emerald-700');
											tabComentarios.setAttribute('aria-selected','true');
											tabComentarios.classList.remove('bg-gray-200', 'border-gray-300');
											tabComentarios.classList.add('bg-emerald-600','text-white', 'border-emerald-700');

											hideSelectors.forEach(sel=>{
												document.querySelectorAll(sel).forEach(el=> (el as HTMLElement).style.display = 'none');
											});
											commentsPanel.style.display = 'block';
										}
									}

									if (tabMateria && tabComentarios) {
										tabMateria.addEventListener('click', ()=> setActive('materia'));
										tabComentarios.addEventListener('click', ()=> setActive('comentarios'));
									}

									// simple comment handling
									(window as any).addComment = function(){
										const textEl = document.getElementById('comment-text') as HTMLTextAreaElement | null;
										const text = (textEl?.value || '').trim();
										if(!text) return;
										const list = document.getElementById('comments-list') as HTMLDivElement | null;
										const item = document.createElement('div');
										item.style.padding = '8px';
										item.style.borderTop = '1px solid rgba(0,0,0,0.06)';
										item.innerHTML = '<div style="font-size:0.9rem;margin-bottom:4px;"><strong>Anon</strong></div><div style="font-size:0.95rem;">' + escapeHtml(text) + '</div>';
										if (list) list.prepend(item);
										if (textEl) textEl.value = '';
										setActive('comentarios');
									};

									function escapeHtml(str: string){ 
										const map: Record<string,string> = {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'};
										return str.replace(/[&<>"]/g, (c: string) => map[c] || c);
									}

									// initialize on load
									setActive('materia');
								})();
							</script>
						</div>
					</div>
					<div class="text-center my-6">
						{heroImage && (
							<div class="hero-image mb-8">
								<Image src={heroImage.default} alt={`${titulo} - Hero Image`} width={720} height={400} />
							</div>
						)}
						<h2 class="px-4 font-bold text-3xl" style="margin-top:0">{titulo}</h2>
						{
							subtitulo && (<h2 class="px-4 text-xs mb-2" style="margin-top:0">{subtitulo}</h2>)
						}
						<div class="date text-sm">
							<FormattedDate date={dataPublicacao as Date} />
						</div>
						<hr />
						<div class="text-left mt-2 text-sm">
							<strong>Criado por:</strong> {currentGrupo?.alunos?.join(', ')}
							<br />
							<strong>Responsável:</strong> {currentResponsavel}
						</div>
					</div>
					<div id="post-content" class="text-justify">
						<slot />
					</div>
					<div class="mt-4 text-center">
						<a  href="#" onclick="history.back()" class="inline-block px-3 py-1 text-sm c-bg-primary text-white rounded hover:bg-blue-700 transition">
							Voltar
						</a>
					</div>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>